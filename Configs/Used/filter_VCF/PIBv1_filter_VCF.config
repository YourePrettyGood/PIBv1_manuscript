//General parameters for nextflow execution:
process.executor = "slurm"
process.clusterOptions = '--requeue'
//SLURM general submission options:
executor {
   queueSize = 300
   submitRateLimit = '100/5min'
}

//Input parameters for the pipeline:

//Directory for final outputs:
params.run_name = "PIBv1"
params.output_prefix = "/gpfs/gibbs/pi/tucci/pfr8/Friedlaender/AnalysisFreezes"
params.output_dir = "${params.output_prefix}/${params.run_name}_filtering"
//Default paths, globs, and regexes:
params.vcf_glob = "${params.output_dir}/byChrom/*.vcf.gz"
//Regex to pull out the chromosome:
params.vcfchr_regex = ~/_chr(\p{Alnum}+)$/
//BAM glob for maxDP calculation:
params.bam_glob = "${params.output_dir}/BAMs/*.ba{m,m.bai}"
//The first capture group in the following regex must be a unique identifier
// for the library and sequencing run:
params.id_regex = ~/^(\p{Alnum}+)_MD_IR_recal/
//I'm setting up file names such that they follow this scheme:
//[sample ID]_MD_IR_recal*.bam
//^^^^^^^^^^^
//Capture this part

//Filtering thresholds:
//Note: We also set a 0 missingness filter automatically
params.exchet_thresh = "0.0001"
params.hwe_thresh = "0.0001"
params.indelprox_thresh = "5"
params.missing_thresh = "0.05"
params.mindp_thresh = "10"
params.mingq_thresh = "30"
//MAPQ threshold is for calculating depth with mosdepth:
// (for GATK CallableLoci-like thresholding on DP)
params.mapq_thresh = "30"
//Quantile for maxDP calculation:
params.maxdp_quantile = "0.995"

//Debugging options:
trace {
   enabled = true
   fields = 'task_id,name,hash,status,exit,cpus,memory,time,submit,start,complete,duration,%cpu,%mem,peak_rss,workdir'
   file = "${params.output_dir}/${params.run_name}_filtering_nextflow_trace.txt"
   raw = true
   overwrite = true
}

//Reference-related parameters for the pipeline:
profiles {
   hs37d5 {
      params.ref_prefix = "/gpfs/gibbs/pi/tucci/pfr8/refs"
      params.ref = "${params.ref_prefix}/1kGP/hs37d5/hs37d5.fa"
      //Autosomes for maxDP calculation:
      params.ref_autosomes_bed = "${params.ref_prefix}/1kGP/hs37d5/hs37d5_autosomes.bed"
      //PARs:
      params.ref_par_bed = "${params.ref_prefix}/1kGP/hs37d5/hs37d5_PARs.bed"
      //BED masks:
      params.mpra_masks_prefix = "/gpfs/gibbs/pi/tucci/pfr8/Friedlaender/MPRA/PIB92_pilot/masks"
      params.cpg_bed = "${params.mpra_masks_prefix}/cpg2_windows_sorted.bed"
      params.segdup_bed = "${params.mpra_masks_prefix}/genomicSuperDups_sorted.bed"
      params.mappability_bed = "${params.mpra_masks_prefix}/hs37m_mask35_50_sorted.bed"
      //Archaic filter BEDs:
      params.archaic_prefix = "/gpfs/gibbs/pi/tucci/pfr8/Archaic/ACVD_merged_dbSNP154/"
      params.altainea_bed = "${params.archaic_prefix}/archaic_allchroms_BEDs/Altai.filter.bed.gz"
      params.vindijanea_bed = "${params.archaic_prefix}/archaic_allchroms_BEDs/Vindija.filter.bed.gz"
      params.chagyrskayanea_bed = "${params.archaic_prefix}/archaic_allchroms_BEDs/Chagyrskaya.filter.bed.gz"
      params.altaidenisova_bed = "${params.archaic_prefix}/archaic_allchroms_BEDs/Denisova.filter.bed.gz"
   }

   farnam {
      params.mod_bcftools = "bcftools/1.10.2-119-g42942b4"
      params.mod_htslib = "htslib/1.10.2-131-g0456cec"
      params.mod_mosdepth = "mosdepth/v0.3.2"
      params.mod_R = "R/4.1.0-foss-2020b"
      process.queue = "pi_tucci,general"
   }

   ruddle {
      params.mod_bcftools = "bcftools/8a744dd"
      params.mod_htslib = "htslib/78441c9"
      params.mod_mosdepth = "mosdepth/0.3.2"
      params.mod_R = "R/4.1.0-foss-2020b"
   }
}

//SLURM submission parameters:
//Memory specified in GiB unless otherwise indicated
//Defaults for cpus, memory, and time for each process:
//Sample-dependent per-site filters:
//Max 1 retry
//Adds 32 GiB per retry
//Timeout to 72h on retry
params.persite_filters_cpus = 1
params.persite_filters_mem = 32
params.persite_filters_timeout = '24h'
//BED-based per-site filters:
//Max 1 retry
//Adds 32 GiB per retry
//Timeout to 72h on retry
params.bed_filters_cpus = 1
params.bed_filters_mem = 32
params.bed_filters_timeout = '24h'
//Fixed threshold genotype masks:
//Max 1 retry
//Adds 32 GiB per retry
//Timeout to 72h on retry
params.fixedthresh_masks_cpus = 1
params.fixedthresh_masks_mem = 32
params.fixedthresh_masks_timeout = '24h'
//Depth CDF from BAMs:
//Max 1 retry
//Adds 4 GiB per retry
//Timeout to 72h on retry
params.mosdepth_cpus = 1
params.mosdepth_mem = 4
params.mosdepth_timeout = '24h'
//maxDP genotype mask:
//Max 1 retry
//Adds 32 GiB per retry
//Timeout to 72h on retry
params.maxdp_bybin_cpus = 1
params.maxdp_bybin_mem = 32
params.maxdp_bybin_timeout = '24h'
