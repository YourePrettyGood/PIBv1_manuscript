//General parameters for nextflow execution:
process.executor = "slurm"
process.clusterOptions = '--requeue'
//SLURM general submission options:
executor {
   queueSize = 300
   submitRateLimit = '100/5min'
}

//Input parameters for the pipeline:
//Directory for final outputs:
params.run_name = "PIBv1"
params.output_prefix = "/gpfs/gibbs/pi/tucci/pfr8/Friedlaender/AnalysisFreezes/"
params.output_dir = "${params.output_prefix}/${params.run_name}_Sprime"

//Glob for the per-chromosome VCFs:
params.vcf_glob = "${params.output_dir}/modern_VCFs/*.vcf.gz"
//Regex for parsing the chromosome out of the VCF name:
params.vcf_regex = ~/_chr(\p{Alnum}+)/
//Glob for Sprime archaic matches files:
params.sprime_match_glob = "${params.output_dir}/Sprime/*_autosomes_Sprime_matches.tsv.gz"
//Regex for parsing the population out of the matches file name:
params.sprime_match_regex = ~/^(.+)_autosomes_Sprime_matches$/
//Glob for Sprime archaic match rate files:
params.sprime_matchrate_glob = "${params.output_dir}/Sprime/*_autosomes_Sprime_match_rates.tsv.gz"
//Regex for parsing the population out of the match rates file name:
params.sprime_matchrate_regex = ~/^(.+)_autosomes_Sprime_match_rates$/

//Path to freeze metadata file:
params.metadata_file = "${params.output_dir}/${params.run_name}_metadata.tsv"
//Sample ID file for exclusion:
params.samples_to_exclude = "${params.output_dir}/${params.run_name}_samples_to_exclude.txt"

//Tract origins to assess and criteria to use:
params.origin_criteria = "PFR"
params.tract_origin_list = "Neandertal,Denisovan,Ambiguous"
//Whether r^2 should be calculated based on genotypes or haplotypes ("geno" or "hap"):
//Or more accurately, whether the input VCFs are phased or unphased
params.phased = false
//Minimum r^2 to report (0.3 in Gittelman et al. 2016 for core haplotype):
params.min_r2 = "0.3"
//Whether to run any of the projection code on haplotypes:
params.happroject = false

//Metadata structure information for Sprime sample selection:
//Sample ID column name in metadata file:
params.id_colname = "SampleID"
//Column name for target supergroup (used for calculating r^2):
params.r2_colname = "Region"
//Target group column name:
params.sprime_target_colname = "AnalysisGroup"

//File listing Sprime target populations (one pop per line):
params.target_pops_file = "${params.output_dir}/${params.run_name}_Sprime_target_populations.txt"

//Debugging options:
trace {
   enabled = true
   fields = 'task_id,name,hash,status,exit,cpus,memory,time,submit,start,complete,duration,%cpu,%mem,peak_rss,workdir'
   file = "${params.output_dir}/${params.run_name}_Sprime_AdaptiveIntrogression_nextflow_trace.txt"
   raw = true
   overwrite = true
}

//Reference-related parameters for the pipeline:
profiles {
   hs37d5 {
      //List of autosomes to use:
      params.autosomes = "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22"
      //Annotation GFF to use:
      params.annotation_gff = "/gpfs/gibbs/pi/tucci/pfr8/refs/GENCODE/r38/gencode.v38lift37.annotation.gff3.gz"
   }

   farnam {
      params.mod_bcftools = "bcftools/1.10.2-119-g42942b4"
      params.mod_htslib = "htslib/1.10.2-131-g0456cec"
      params.mod_R = "R/4.1.0-foss-2020b"
      params.mod_bedtools = "bedtools/2.29.2-41-g4ebba70"
      params.mod_vcftools = "VCFtools/0.1.16-GCCcore-10.2.0-Perl-5.32.0"
      process.queue = 'pi_tucci,general'
   }

   ruddle {
      params.mod_bcftools = "bcftools/1eba45c"
      params.mod_htslib = "htslib/a1dec95"
      params.mod_R = "R/4.1.0-foss-2020b"
      params.mod_bedtools = "bedtools/cc714eb"
      params.mod_vcftools = "VCFtools/0.1.16-GCCcore-10.2.0-Perl-5.32.0"
   }
}

//SLURM submission parameters:
//Memory specified in GiB unless otherwise indicated
//Identify Sprime "tag" sites
//Adds 8 GiB on retry
//Timeout to 24h on retry
//Max 1 retry
params.tagsites_cpus = 1
params.tagsites_mem = 1
params.tagsites_timeout = '1h'
//Identify core haplotypes based on LD connected components
//Adds 16 GiB on retry
//Timeout to 48h on retry
//Max 1 retry
params.calcld_cpus = 1
params.calcld_mem = 1
params.calcld_timeout = '1h'
//Concatenate core haplotypes across chromosomes and tract origins
//Adds 16 GiB on retry
//Timeout to 24h on retry
//Max 1 retry
params.catcorehaps_cpus = 1
params.catcorehaps_mem = 1
params.catcorehaps_timeout = '1h'
//Annotate .score/_matches.tsv file with core haplotypes
//Adds 16 GiB on retry
//Timeout to 24h on retry
//Max 1 retry
params.corescore_cpus = 1
params.corescore_mem = 1
params.corescore_timeout = '1h'
//Sprime core haplotype projection
//Adds 16 GiB on retry
//Timeout to 24h on retry
//Max 1 retry
params.coreproject_cpus = 1
params.coreproject_mem = 1
params.coreproject_timeout = '2h'
//Sprime core haplotype frequencies
//Adds 16 GiB on retry
//Timeout to 24h on retry
//Max 1 retry
params.coretf_cpus = 1
params.coretf_mem = 1
params.coretf_timeout = '2h'
//Sprime core haplotype gene lists
//Adds 16 GiB on retry
//Timeout to 24h on retry
//Max 1 retry
params.coregenes_cpus = 1
params.coregenes_mem = 1
params.coregenes_timeout = '1h'
//Combine outputs across targets and chromosomes
//Adds 16 GiB on retry
//Timeout to 24h on retry
//Max 1 retry
params.catouts_cpus = 1
params.catouts_mem = 1
params.catouts_timeout = '1h'
//Construct map from core haplotypes to Sprime tracts
//Adds 4 GiB on retry
//Timeout to 24h on retry
//Max 1 retry
params.tractmap_cpus = 1
params.tractmap_mem = 1
params.tractmap_timeout = '1h'
