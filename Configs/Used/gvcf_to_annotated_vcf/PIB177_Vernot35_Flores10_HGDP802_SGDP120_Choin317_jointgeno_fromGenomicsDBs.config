//General parameters for nextflow execution:
process.executor = "slurm"
process.clusterOptions = '--requeue'
//SLURM general submission options:
executor {
   queueSize = 300
   submitRateLimit = '100/5min'
}

//Input parameters for the pipeline:

//Directory for final outputs:
params.run_name = "PIB177_Vernot35_Flores10_HGDP802_SGDP120_Choin317"
params.output_prefix = "/gpfs/gibbs/pi/tucci/pfr8/Friedlaender/FullDepthBatches"
params.output_dir = "${params.output_prefix}/${params.run_name}_jointgeno"
//Input gVCFs directory:
params.gvcf_glob = "${params.output_dir}/gVCFs/*.g.vcf.gz"
//Input GenomicsDB tarballs glob:
params.genomicsdb_glob = "${params.output_dir}/GenomicsDB/*.tar.gz"
params.already_imported = true
//Chromosomes to use:
params.chroms = "nuclear"
//Whether to merge with the archaics or not:
params.add_archaics = 1
//Batch size for first level of combining gVCFs:
//params.batch_size = 100
//Batch size for GenomicsDBImport:
params.gvcfimport_batchsize = 42
//Interval padding for GenomicsDBImport:
params.gvcfimport_padding = 0
//VQSR sensitivity levels:
params.snp_sens = 99.8
params.indel_sens = 99.0
//dbSNP build:
params.dbsnp_build = 154

//Debugging options:
trace {
   enabled = true
   fields = 'task_id,name,hash,status,exit,cpus,memory,time,submit,start,complete,duration,%cpu,%mem,peak_rss,workdir'
   file = "${params.output_dir}/${params.run_name}_jointgeno_fromGenomicsDBs_nextflow_trace.txt"
   raw = true
   overwrite = true
}

//Reference-related parameters for the pipeline:
profiles {
   hs37d5 {
      params.ref_prefix = "/gpfs/gibbs/pi/tucci/pfr8/refs"
      params.ref = "${params.ref_prefix}/1kGP/hs37d5/hs37d5.fa"
      //List of chromosomes to use
      params.autosomes = "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22"
      params.nuclear_chroms = "${params.autosomes},X,Y"
      params.major_chroms = "${params.nuclear_chroms},MT"
      //File of file names for scattering interval BED files for joint genotyping:
      params.scattered_bed_fofn = "${params.ref_prefix}/1kGP/hs37d5/scatter_intervals/hs37d5_thresh_50Mbp_nuclearchroms_scattered_BEDs.fofn"
      //Databases of SNPs and INDELs for VQSR:
      params.hapmap_snps = "${params.ref_prefix}/Broad/b37/hapmap_3.3.b37.vcf"
      params.omni_snps = "${params.ref_prefix}/Broad/b37/1000G_omni2.5.b37.vcf"
      params.tgp_snps = "${params.ref_prefix}/Broad/b37/1000G_phase1.snps.high_confidence.b37.vcf"
      params.dbsnp_vqsr = "${params.ref_prefix}/Broad/b37/dbsnp_138.b37.vcf"
      params.mills_indels = "${params.ref_prefix}/Broad/b37/Mills_and_1000G_gold_standard.indels.b37.vcf"
      //dbSNP VCF:
      params.dbsnp = "/gpfs/gibbs/pi/tucci/pfr8/Archaic/ACVD_merged_dbSNP${params.dbsnp_build}/final_VCFs/dbSNP_${params.dbsnp_build}_hs37d5.vcf.gz"
      //Globs and regexes for archaic VCFs and PanTro (from EPO) VCFs:
      params.arcvcf_glob = "/gpfs/gibbs/pi/tucci/pfr8/Archaic/ACVD_merged_dbSNP${params.dbsnp_build}/final_VCFs/ArchaicsMerged_chr*.vcf.gz"
      params.arc_regex = ~/^ArchaicsMerged_chr(\p{Alnum}+)$/
      params.pantrovcf_glob = "/gpfs/gibbs/pi/tucci/pfr8/human_ancestor/EPO_alignments/Ensembl_R75_6primates/PanTro_R75_EPO_*.vcf.gz"
      params.pantro_regex = ~/^PanTro_R75_EPO_(\p{Alnum}+)$/
   }

   farnam {
      params.mod_picard = "picard/2.24.0"
      params.mod_gatk4 = "GATK/4.1.8.1-Java-1.8"
      params.mod_bcftools = "bcftools/1.10.2-119-g42942b4"
      params.mod_htslib = "htslib/1.10.2-131-g0456cec"
      params.mod_R = "R/4.1.0-foss-2020b"
      params.bigmem_queue = "bigmem"
      params.bigmem_maxtimeout = '72h'
      params.base_queue = "pi_tucci,general"
      params.base_maxtimeout = '720h'
      process.queue = "pi_tucci,general"
   }

   ruddle {
      params.mod_picard = "picard/2.24.0"
      params.mod_gatk4 = "GATK/4.1.8.1-Java-1.8"
      params.mod_bcftools = "bcftools/8a744dd"
      params.mod_htslib = "htslib/78441c9"
      params.mod_R = "R/4.1.0-foss-2020b"
      params.bigmem_queue = "bigmem"
      params.bigmem_maxtimeout = '168h'
      params.base_queue = "general"
      params.base_maxtimeout = '720h'
   }
}

//SLURM submission parameters:
//Memory specified in GiB unless otherwise indicated
//GATK IndexFeatureFile
//Max 1 retry
//Adds 4 GiB per retry
//Timeout to 6h on retry
params.index_cpus = 1
params.index_mem = 1
params.index_timeout = '1h'
////GATK CombineGVCFs tier one
////Adds 1 GiB for overhead automatically
////Max 1 retry
////Adds 16 GiB per retry
////Timeout to 72h on retry
//params.tierone_cpus = 1
////Minimum 4 GB required by pipeline
//params.tierone_mem = 16
//params.tierone_timeout = '48h'
////GATK CombineGVCFs tier two
////Adds 1 GiB for overhead automatically
////Max 1 retry
////Adds 456 GiB per retry and changes to bigmem queue
////Timeout to 168h on retry
//params.tiertwo_cpus = 1
////Minimum 4 GB required by pipeline
//params.tiertwo_mem = 53
//params.tiertwo_memramp = 456
//params.tiertwo_timeout = '72h'
//GATK GenomicsDBImport
//Adds params.gvcfimport_memoverhead GiB overhead automatically
//Max 1 retry
//Adds params.gvcfimport_memramp GiB per retry
//Timeout to params.X_maxtimeout on retry where X is the queue (base or bigmem)
params.gvcfimport_cpus = 1
//Minimum 4 GB required by pipeline
params.gvcfimport_mem = 16
params.gvcfimport_memramp = 16
params.gvcfimport_memoverhead = 4
params.gvcfimport_timeout = '336h'
params.gvcfimport_switchqueue = false
//GATK GenotypeGVCFs
//Adds params.jointgeno_memoverhead GiB for overhead automatically
//Max 1 retry
//Adds 84 GiB per retry and doesn't change queue
//Timeout to params.X_maxtimeout on retry where X is the queue (base or bigmem)
params.jointgeno_cpus = 1
params.jointgeno_mem = 27
params.jointgeno_memramp = 84
params.jointgeno_memoverhead = 5
params.jointgeno_timeout = '336h'
params.jointgeno_switchqueue = false
//VQSR
//Adds params.vqsr_memoverhead GiB for overhead automatically
//Max 1 retry
//Adds 128 GiB per retry and changes to bigmem queue
//Timeout to params.X_maxtimeout on retry where X is the queue (base or bigmem)
params.vqsr_cpus = 1
params.vqsr_mem = 113
params.vqsr_memramp = 128
params.vqsr_memoverhead = 5
params.vqsr_timeout = '336h'
params.vqsr_switchqueue = true
//Scatter VCF by chromosome
//Max 1 retry
//Adds 16 GiB per retry
//Timeout to 48h on retry
params.scatter_cpus = 1
params.scatter_mem = 2
params.scatter_timeout = '48h'
//Annotate VCF with dbSNP
//Max 1 retry
//Adds 16 GiB per retry
//Timeout to 72h on retry
params.dbsnp_cpus = 1
params.dbsnp_mem = 2
params.dbsnp_timeout = '48h'
//Merge VCFs with archaics and PanTro from EPO
//Max 1 retry
//Adds 16 GiB per retry
//Timeout to 168h on retry
params.archaic_cpus = 20
params.archaic_mem = 8
params.archaic_timeout = '72h'
//GATK ValidateVariants
//Adds 1 GiB for overhead automatically
//Max 1 retry
//Adds 4 GiB per retry
//Timeout to 48h on retry
params.vcf_check_cpus = 1
params.vcf_check_mem = 1
params.vcf_check_timeout = '24h'

//Pipeline parameters only to be changed if you know what you're doing:
//Regular expression for parsing the reference region ID out from the reference region BED filename:
params.ref_chunk_regex = ~/^.+_region(\p{Digit}+)$/
//Number of distributions to use in the mixture models for VQSR:
//Number of multivariate Normal distributions to use in the "positive" mixture model for SNP VQSR:
//Byrska-Bishop et al. 2021 BioRxiv uses 8, the default
params.snp_mvn_k = 8
//Number of multivariate Normal distributions to use in the "positive" mixture model for INDEL VQSR:
//Byrska-Bishop et al. 2021 BioRxiv uses 4, recommended when less sites are available for training
params.indel_mvn_k = 4
