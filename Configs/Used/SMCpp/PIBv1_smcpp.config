//General parameters for nextflow execution:
process.executor = "slurm"
process.clusterOptions = '--requeue'
//SLURM general submission options:
executor {
   queueSize = 300
   submitRateLimit = '100/5min'
}

//Input parameters for the pipeline:
//Directory for final outputs:
params.run_name = "PIBv1"
params.output_prefix = "/gpfs/gibbs/pi/tucci/pfr8/Friedlaender/AnalysisFreezes/"
params.output_dir = "${params.output_prefix}/${params.run_name}_demography"

//Glob for the per-chromosome VCFs:
params.vcf_glob = "${params.output_dir}/VCFs/*.vcf.gz"
//Regex for parsing the chromosome out of the VCF name:
params.vcf_regex = ~/_chr(\p{Alnum}+)/
//Glob for the per-individual BAMs and their indices:
params.bam_glob = "${params.output_dir}/BAMs/*_MD_IR_recal_filtered.ba{m,m.bai}"
//Regex for parsing the sample ID out of the BAM filename:
params.bam_regex = ~/^(.+)_MD_IR_recal_filtered$/
//Glob for the depth distribution files from mosdepth in filter_VCF.nf:
params.depth_dist_glob = "${params.output_dir}/depthdists/*.mosdepth.global.dist.txt"
//Regex to parse sample ID from depth distribution filename:
params.depth_regex = ~/^(.+)$/

//Path to freeze metadata file:
params.metadata_file = "${params.output_dir}/${params.run_name}_metadata_filtered.tsv"

//Whether or not to run MSMC2 and CHIMP:
params.run_msmc2 = false
params.run_chimp = false

//Include/filter expression to apply to input VCFs:
params.includestr = ''
//MAPQ threshold for calculating depth with mosdepth (for GATK CallableLoci-like thresholding on DP):
params.mapq_thresh = "30"
//Minimum depth to consider callable:
params.mindp = "10"
//Maximum depth quantile (e.g. 0.995 means 99.5th percentile of autosomal depth):
params.maxdp_quantile = "0.995"
//When combining per-sample masks, what fraction must be uncallable to include in final mask?:
// e.g. 1.0 would mean all samples must be uncallable, so basically intersection of uncallable
params.frac_uncallable = "0"
//Mutation rate to specify:
params.mutation_rate = "1.25e-8"
//Mutation rate to use for CHIMP:
params.mut_rate = '0.0000000125'
//Recombination rate to use for CHIMP:
params.rec_rate = '0.0000000125'
//Seed for PRNG for selecting distinguished lineages for SMC++:
params.prng_seed = "42"
//Number of distinguished lineages to include in composite likelihood:
params.num_dlineages = 10
//Number of samples to use per population for MSMC2:
//Note: This gets multiplied by 2 to get the number of haplotypes used
params.msmc2_num_samples = 2
//Time pattern string for MSMC2:
//Default is 1*2+25*1+1*2+1*3
params.msmc2_time_pattern = '1*2+25*1+1*2+1*3'
//Regularization coefficients for MSMC-IM:
params.msmcim_beta1 = '1e-08'
params.msmcim_beta2 = '1e-06'
//Sample sizes to use for CHIMP:
//This is a comma-separated list of integers
//Default is 2,5,10
params.chimp_n_s = '2,5,10'

//Metadata structure information for Sprime sample selection:
//Sample ID column name in metadata file:
params.id_colname = "SampleID"
//Target group column name:
params.smcpp_target_colname = "AnalysisGroup"

//File listing SMC++ target populations (one pop per line):
params.smcpp_pops_file = "${params.output_dir}/${params.run_name}_smcpp_populations.txt"

//Debugging options:
trace {
   enabled = true
   fields = 'task_id,name,hash,status,exit,cpus,memory,time,submit,start,complete,duration,%cpu,%mem,peak_rss,workdir'
   file = "${params.output_dir}/${params.run_name}_smcpp_nextflow_trace.txt"
   raw = true
   overwrite = true
}

//Reference-related parameters for the pipeline:
profiles {
   hs37d5 {
      //Reference-related parameters for the pipeline:
      params.ref_prefix = "/gpfs/gibbs/pi/tucci/pfr8/refs"
      params.ref = "${params.ref_prefix}/1kGP/hs37d5/hs37d5.fa"
      //List of autosomes to use:
      params.autosomes = "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22"
      //Glob for CHIMP per-chromosome ref FASTAs:
      params.ref_bychrom_glob = "${params.ref_prefix}/1kGP/hs37d5/splitByChrom/*.fa"
      //Regex for parsing the chromosome out of the FASTA name:
      params.ref_bychrom_regex = ~/^(.+)$/
      //Glob for CHIMP per-chromosome ancestral state FASTAs:
      params.anc_bychrom_glob = "/gpfs/gibbs/pi/tucci/pfr8/human_ancestor/Ensembl_R75_GRCh37/homo_sapiens_ancestor_GRCh37_e71/*.fa"
      //Regex for parsing the chromosome out of the FASTA name:
      params.anc_bychrom_regex = ~/^homo_sapiens_ancestor_(.+)$/
      //Heng Li's mappability negative mask (as used in Vernot et al. 2016):
      params.mappability_mask = "/gpfs/gibbs/pi/tucci/pfr8/Friedlaender/MPRA/PIB92_pilot/masks/hs37m_mask35_50_sorted.bed"
   }

   farnam {
      params.mod_bcftools = "bcftools/f4dee4b"
      params.mod_htslib = "htslib/6366029"
      params.mod_mosdepth = "mosdepth/v0.3.2"
      params.mod_smcpp = "smcpp/ca077da"
      params.mod_bedtools = "bedtools/2.29.2-41-g4ebba70"
      params.mod_msmctools = "msmc-tools/1388937"
      params.mod_msmc2 = "msmc2/2.1.2"
      params.mod_msmcim = "MSMC-IM/e6c5d3b"
      params.mod_chimp = "CHIMP/e3ebe95"
      params.mod_python = "Python/3.8.6-GCCcore-10.2.0"
      process.queue = 'pi_tucci,general'
   }

   ruddle {
      params.mod_bcftools = "bcftools/1eba45c"
      params.mod_htslib = "htslib/a1dec95"
      params.mod_mosdepth = "mosdepth/0.3.2"
      params.mod_smcpp = "smcpp/8bdecdf"
      params.mod_bedtools = "bedtools/cc714eb"
      params.mod_msmctools = "msmc-tools/1388937"
      params.mod_msmc2 = "msmc2/2.1.2"
      params.mod_msmcim = "MSMC-IM/e6c5d3b"
      params.mod_chimp = "CHIMP/e3ebe95"
      params.mod_python = "Python/3.8.6-GCCcore-10.2.0"
   }
}

//SLURM submission parameters:
//Memory specified in GiB unless otherwise indicated
//Constructing per-population mask BEDs
//Adds 4 GiB on retry
//Timeout to 72h and 48h on retry, respectively
//Max 1 retry
params.mosdepth_cpus = 1
params.mosdepth_mem = 2
params.mosdepth_timeout = '12h'
params.popmask_cpus = 1
params.popmask_mem = 1
params.popmask_timeout = '12h'
//VCF subsetting for SMC++
//Memory in MB
//Adds 512 MB on retry
//Timeout to 24h on retry
//Max 1 retry
params.smcppsubset_cpus = 1
params.smcppsubset_mem = 512
params.smcppsubset_timeout = '1h'
//smcpp vcf2smc
//Memory in MB
//Adds 1024 MB on retry
//Timeout to 24h on retry
//Max 1 retry
params.vcftosmc_cpus = 1
params.vcftosmc_mem = 1024
params.vcftosmc_timeout = '12h'
//smcpp estimate
//Adds 16 GiB on retry
//Timeout to 48h on retry
//Max 1 retry
params.smcpp_cpus = 8
params.smcpp_mem = 48
params.smcpp_timeout = '24h'
//smcpp plot
//Adds 16 GiB on retry
//Timeout to 48h on retry
//Max 1 retry
params.smcppplot_cpus = 1
params.smcppplot_mem = 1
params.smcppplot_timeout = '6h'
//generate_multihetsep.py
//Adds 16 GiB on retry
//Timeout to 48h on retry
//Max 1 retry
params.msmcprep_cpus = 1
params.msmcprep_mem = 4
params.msmcprep_timeout = '24h'
//msmc2
//Adds 32 GiB on retry
//Timeout to 48h on retry
//Max 1 retry
//params.msmc_cpus = params.msmc2_num_haplotypes.times(params.msmc2_num_haplotypes.minus(1)).intdiv(2)
params.msmc_mem = 40
params.msmc_timeout = '24h'
//msmc2 on population pairs
//Adds 32 GiB on retry
//Timeout to 48h on retry
//Max 1 retry
//params.msmc_ccr_cpus = params.msmc2_num_haplotypes.times(params.msmc2_num_haplotypes.minus(1)).intdiv(2)
params.msmc_ccr_mem = 110
params.msmc_ccr_timeout = '24h'
//CHIMP
//Automatically adds 1 GiB overhead
//Adds 32 GiB on retry
//Timeout to 120h on retry
//Max 1 retry
params.chimp_cpus = 1
params.chimp_mem = 8
params.chimp_timeout = '48h'
